#include<stdio.h>
#include<malloc.h>
#include<stdlib.h>
#include <iostream>
#include<string>
#include <cctype>
using namespace std;
#define OK 1
#define ERROR 0
#define LIST_INIT_SIZE 100  //线性表存储空间的初始分配量
#define LISTINCREMENT 10    //线性表存储空间的分配增量

typedef int Status;
typedef int ElemType;

typedef struct{
	ElemType  *elem,*newbase;  //存储空间基址-
	int      length;  //当前长度
	int    listsize;  //当前分配的存储容量
}SqList;

Status InitList_Sq(SqList &L) {
  // 算法2.3
  // 构造一个空的线性表L。
  L.elem = (ElemType *)malloc(LIST_INIT_SIZE*sizeof(ElemType));
  if (!L.elem) return ERROR;        // 存储分配失败
  L.length = 0;                  // 空表长度为0
  L.listsize = LIST_INIT_SIZE;   // 初始存储容量
  return OK;
} // InitList_Sq
//可行

Status ListInsert_Sq(SqList &L, int i, ElemType e) {  // 算法2.4
  // 在顺序线性表L的第i个元素之前插入新的元素e，
  // i的合法值为1≤i≤ListLength_Sq(L)+1
  if(i<1||i>L.length+1)return ERROR;//i值不合法
  if(L.length>=L.listsize){         //当前存储空间已满，增加分配
    L.newbase=(ElemType*)realloc(L.elem,(L.listsize+LISTINCREMENT)*sizeof(ElemType));
    if(!L.newbase)  return ERROR;     //存储分配失败
    L.elem=L.newbase;                 //新基址
    L.listsize+=LISTINCREMENT;      //增加存储容量
  }
  ElemType *q=&(L.elem[i-1]);                 //q为插入位置
  ElemType *p;
  ++L.length;                       //表长增1
  for(p=&(L.elem[L.length-1]);p>=q;--p)*(p+1)=*p;  //插入位置及之后的元素右移
  L.elem[i-1]=e;                             //插入e
  return OK;
 //请同学们自行完成！

} // ListInsert_Sq
//可行

Status ListDelete_Sq(SqList &L, int i, ElemType &e) {  // 算法2.5
  // 在顺序线性表L中删除第i个元素，并用e返回其值。
  // i的合法值为1≤i≤ListLength_Sq(L)。
  if((i<1)||(i>L.length)) return ERROR;   //i值不合法
  ElemType *p=&(L.elem[i-1]);                       //p为被删除元素的位置
  e=*p;                                   //被删除元素的值赋给e
  ElemType *q=L.elem+L.length-1;                    //表尾元素的位置
  for(++p;p<=q;++p)*(p-1)=*p;             //被删除元素之后的元素左移
  --L.length;                             //表长减1
  return OK;

 //请同学们自行完成！

} // ListDelete_Sq
//可行

void DestroyList(SqList *L)
{
 //销毁线性表
 free(L);
	printf("线性表已经被释放！线性表的长度：%d",L->length);
	printf("\n(由于线性表已经被释放所以显示的长度为随机值)");

//请同学们自行完成！

}

int Locatelist_sq(SqList L,ElemType e)
{
//在La中查找某元素，若找到，则返回它在La中第一次出现的位置，否则返回0
int i=1;
ElemType *p=L.elem;
while(i<=L.length&& *p++!=e) ++i;
if(i<=L.length) cout<<"数据的位置为："<<i;
else cout<<'0';

//请同学们自行完成！

}//可行


Status ListPrint_Sq(SqList L) {  // 补充算法
   //显示线性表中所有数据
   for(int i=0;i<L.length;i++)
	   cout<<L.elem[i]<<"  ";
   cout<<endl;
   return OK;
}//可行


int main()
{
  //同学们可以自行修改和完善！

	SqList L;
	int n;
	int e;
	int i;
	InitList_Sq(L);
	cout<<"请输入初始建立线性表的长度n（<=100）:";
	 //printf("请输入初始建立线性表的长度n（<=100）:");
	cin>>n;  //scanf(&n);
	cout<<"请依次输入数据"<<endl;
	for(i=1;i<=n;i++)
	{
		cin>>L.elem[i-1]; //scanf(&L.elem[i-1]);
		L.length++;
	}
	cout<<"您刚才输入的线性表为:";
	ListPrint_Sq(L);
	cout<<"请输入需要插入的元素（e）值:";
	cin>>e;
	cout<<"请输入需要插入的位置（i）:";
	cin>>i;
	ListInsert_Sq(L,i,e);
	cout<<"插入数据后的线性表为:";
	ListPrint_Sq(L);
	cout<<"请输入您想要删除的数据位置（i）:";
	cin>>i;
	ListDelete_Sq(L,i,e);
	cout<<"删除数据后的线性表为:";
	ListPrint_Sq(L);
	cout<<"删除数据的数据是: "<<e<<endl;
	cout<<"请输入要查找的数据:"<<endl;
	cin>>e;
	Locatelist_sq(L,e);      //查找数据的位置
	cout<<"线性表为：";
	ListPrint_Sq(L);
	cout<<endl;
	cout<<"销毁线性表"<<endl;


	DestroyList(&L);//加了地址符


	return 0;

}
